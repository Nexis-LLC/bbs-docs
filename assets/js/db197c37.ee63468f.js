"use strict";(self.webpackChunkbbs_docs=self.webpackChunkbbs_docs||[]).push([[8147],{540:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Architecture/ADRs/saga-pattern","title":"saga-pattern","description":"ADR 004: Saga Pattern for Distributed Transactions (Over Two\u2011Phase Commit)","source":"@site/docs/03_Architecture/ADRs/004-saga-pattern.md","sourceDirName":"03_Architecture/ADRs","slug":"/Architecture/ADRs/saga-pattern","permalink":"/bbs-docs/docs/Architecture/ADRs/saga-pattern","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"grpc-over-rest","permalink":"/bbs-docs/docs/Architecture/ADRs/grpc-over-rest"},"next":{"title":"postgres-over-nosql","permalink":"/bbs-docs/docs/Architecture/ADRs/postgres-over-nosql"}}');var r=t(4848),o=t(8453);const i={},a=void 0,c={},l=[{value:"ADR 004: Saga Pattern for Distributed Transactions (Over Two\u2011Phase Commit)",id:"adr-004-saga-pattern-for-distributed-transactions-over-twophase-commit",level:2}];function d(e){const s={br:"br",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"adr-004-saga-pattern-for-distributed-transactions-over-twophase-commit",children:"ADR 004: Saga Pattern for Distributed Transactions (Over Two\u2011Phase Commit)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Context:"}),(0,r.jsx)(s.br,{}),"\n","Booking + Payment + Seat Inventory updates span multiple services and databases. Two\u2011phase commit is heavyweight and brittle in microservices."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Decision:"}),(0,r.jsx)(s.br,{}),"\n","Implement a ",(0,r.jsx)(s.strong,{children:"Saga orchestration"})," using Kafka events and idempotent compensating actions."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Consequences:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pros:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Loosely coupled services, asynchronous flows, better failure isolation."}),"\n",(0,r.jsx)(s.li,{children:"Avoids global locks or blocking transactions across services."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Cons:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Added complexity in defining compensating actions."}),"\n",(0,r.jsx)(s.li,{children:"Harder to reason about end\u2011to\u2011end state; requires careful monitoring and retry logic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>a});var n=t(6540);const r={},o=n.createContext(r);function i(e){const s=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);