"use strict";(self.webpackChunkbbs_docs=self.webpackChunkbbs_docs||[]).push([[127],{7871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"SRS","title":"Software Requirements Specification (SRS)","description":"Bus Ticket Booking System","source":"@site/docs/02_SRS.md","sourceDirName":".","slug":"/SRS","permalink":"/bbs-docs/en/docs/SRS","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"1. Vision Document","permalink":"/bbs-docs/en/docs/Vision"}}');var i=n(4848),r=n(8453);const l={},o="Software Requirements Specification (SRS)",a={},d=[{value:"Bus Ticket Booking System",id:"bus-ticket-booking-system",level:2}];function c(e){const t={h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"software-requirements-specification-srs",children:"Software Requirements Specification (SRS)"})}),"\n",(0,i.jsx)(t.h2,{id:"bus-ticket-booking-system",children:"Bus Ticket Booking System"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"1. Introduction"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"1.1 Purpose"})}),"\n",(0,i.jsxs)(t.p,{children:["This document rigorously outlines the functional and non-functional requirements for a ",(0,i.jsx)(t.strong,{children:"Real-Time High-Load Bus Ticket Booking System"}),". The system is engineered to concurrently serve ",(0,i.jsx)(t.strong,{children:"over 10,000 users"})," with stringent performance targets: ",(0,i.jsx)(t.strong,{children:"sub-second end-to-end latency (p99)"}),", a minimum ",(0,i.jsx)(t.strong,{children:"99.99% monthly uptime"}),", and a firm commitment to ",(0,i.jsx)(t.strong,{children:"zero overbooking"}),". This specification serves as the definitive guide for the development, testing, and deployment of the system."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"1.2 Scope"})}),"\n",(0,i.jsx)(t.p,{children:"The system will provide the following core capabilities:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Real-time seat inventory management:"})," Accurate and up-to-the-second tracking of seat availability."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Secure payments:"})," Integration with PayPal for processing online transactions."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Automated scaling:"})," Dynamic adjustment of resources to handle varying loads."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Fault tolerance:"})," Mechanisms to ensure system resilience and minimize downtime."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Centralized observability:"})," Comprehensive monitoring and logging for system health and performance analysis."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Explicitly Excluded from Scope:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multi-region active-active deployment:"})," Distribution of the system across multiple geographically dispersed data centers for enhanced availability."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"AI-driven demand forecasting:"})," Predictive analytics to anticipate future booking trends and optimize resource allocation."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"2. System Overview"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"2.1 Key Features"})}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Real-Time Seat Booking:"})," Ensures atomic reservation of seats utilizing optimistic locking mechanisms to maintain data consistency under high concurrency."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Resilient Payments:"})," Implements idempotent payment transactions through PayPal integration, preventing duplicate charges and ensuring reliable processing."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Horizontal Autoscaling:"})," Leverages Kubernetes to automatically scale the number of application instances based on demand."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Comprehensive Observability:"})," Integrates a robust observability stack including:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Logs:"})," ELK (Elasticsearch, Logstash, Kibana) for centralized log aggregation and analysis."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Metrics:"})," Prometheus and Grafana for collecting and visualizing key performance indicators."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tracing:"})," Zipkin for distributed transaction tracing to identify performance bottlenecks."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"2.2 User Roles"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Role"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Traveler"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"End-user who can browse routes, view seat availability, book seats, make online payments, and manage their tickets."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Bus Operator"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"System user responsible for managing bus routes, defining seat configurations, setting pricing, and viewing booking statistics."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Administrator"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"System operator with privileges to monitor overall system health, configure security policies, and manage user roles and permissions."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"3. Functional Requirements"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"3.1 Seat Reservation"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Priority"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR1"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Travelers shall be able to reserve seats in real-time via a low-latency gRPC API."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"High"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The gRPC API should be designed for high performance and efficiency to handle concurrent booking requests."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR2"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The system shall maintain a near real-time cache of seat inventory in Redis with a Time-To-Live (TTL) of 5 seconds to minimize direct load on the PostgreSQL database."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"High"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The caching strategy should balance data freshness with read performance. Consider cache invalidation strategies for critical updates."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR3"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The system shall prevent overbooking of seats using PostgreSQL row-level locks to ensure data integrity during concurrent reservations."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Critical"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Row-level locks should be implemented efficiently to minimize contention and impact on overall performance."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"3.2 Payment Processing"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Priority"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR4"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Travelers shall be able to make payments securely via PayPal. All payment transactions must be idempotent, with idempotency keys stored in Redis to prevent duplicate charges."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"High"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The PayPal integration should adhere to security best practices. Idempotency keys should have an appropriate expiration policy."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR5"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"In the event of a failed payment, the system shall automatically initiate a refund process using the Saga pattern to ensure eventual consistency across involved services (e.g., booking and payment)."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Medium"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Saga pattern implementation should handle potential compensation transactions and failure scenarios gracefully. Define clear steps and error handling within the Saga."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"3.3 System Administration"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Priority"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR6"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Administrators shall be able to manage Role-Based Access Control (RBAC) roles and permissions for system users through integration with Keycloak using OAuth2/OIDC protocols."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"High"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Keycloak integration should be seamless and secure. Define the specific roles and their associated permissions."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"FR7"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Administrators shall have the ability to monitor key system metrics (e.g., API latency, Kafka consumer lag, CPU/memory utilization) in Grafana to gain insights into system performance and health."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Medium"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Define the specific metrics that need to be monitored and the thresholds for alerts. Grafana dashboards should be intuitive and provide actionable information."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4. Non-Functional Requirements"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4.1 Performance"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Metric"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR1"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The 99th percentile (p99) of the API response time for seat reservation and payment initiation endpoints shall be less than 300 milliseconds under a sustained load of 500 requests per second per application pod."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"p99 < 300ms @ 500 req/sec/pod"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Performance testing should be conducted under realistic load conditions to validate this requirement."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR2"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"End-to-end latency for seat inventory updates propagated via Kafka shall be less than 1 second under normal operating conditions."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"E2E Latency < 1s"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"This includes the time taken for an update to be produced, transmitted, and consumed by relevant services."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4.2 Scalability"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Metric"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR3"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The system shall be capable of automatically scaling horizontally from a baseline of 5 pods to a maximum of 50 pods based on CPU utilization and Kafka consumer lag metrics, utilizing KEDA (Kubernetes Event-driven Autoscaling)."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Scale from 5 to 50 pods"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Define the specific CPU utilization and Kafka lag thresholds that trigger scaling events. Ensure that the scaling process is efficient and does not negatively impact performance during scaling operations."})]})})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4.3 Reliability"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Metric"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR4"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The system shall achieve a monthly uptime of at least 99.99%, allowing for a maximum of approximately 4.3 minutes of unscheduled downtime per month."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Uptime \u2265 99.99% (\u2264 4.3 mins downtime/month)"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Implement robust monitoring, alerting, and automated recovery mechanisms to meet this stringent availability target. Consider redundancy at various levels."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR5"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"In the event of a pod failure, the Kubernetes orchestration platform shall automatically restart the failed pod within 30 seconds to minimize service disruption."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Auto-restart within 30s"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Configure appropriate liveness and readiness probes for the Kubernetes pods to enable timely detection and recovery from failures."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4.4 Security"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"ID"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Requirement"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Implementation"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Notes"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR6"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"All internal and external APIs shall enforce JWT (JSON Web Token) validation for authentication and authorization, leveraging Keycloak as the identity provider and adhering to OAuth2/OIDC flows."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"JWT Validation (Keycloak/OAuth2/OIDC)"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Secure all API endpoints to prevent unauthorized access. Implement proper token generation, signing, and verification mechanisms. Regularly review and update security configurations."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"NFR7"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"All sensitive secrets, including database passwords and third-party API keys, shall be securely encrypted at rest using SOPS (Secrets OPerationS) and managed as Kubernetes Secrets."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"SOPS + Kubernetes Secrets"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Implement a secure workflow for managing and accessing secrets. Ensure that secrets are never hardcoded in the application code or configuration files. Regularly rotate sensitive secrets as a security best practice."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"5. External Interfaces"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"5.1 User Interfaces"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Traveler Web/Mobile Application:"})," Provides a user-friendly interface for browsing bus routes, viewing interactive seat maps (built with React.js), filling out booking details, and completing payments through an integrated PayPal SDK."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Administrator Dashboard:"})," A web-based interface (built with Grafana) for visualizing system metrics and dashboards, and Kibana for searching and analyzing aggregated logs."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"5.2 APIs"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"gRPC Endpoints:"})," High-performance, low-latency endpoints for core functionalities such as real-time seat reservation and initiating payment transactions."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"REST APIs:"})," Standardized HTTP-based endpoints for administrative operations, including user management and bus route configuration."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"5.3 Data Storage"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"PostgreSQL:"})," A relational database management system providing ACID (Atomicity, Consistency, Isolation, Durability) compliant transactions for managing core booking data and ensuring data integrity."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Redis:"})," An in-memory data store used as a high-speed cache for seat availability information and for storing idempotency keys to ensure reliable payment processing."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Kafka:"})," A distributed event streaming platform used as the backbone for asynchronous communication of seat updates and payment events between different services."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"6. System Constraints"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Budget:"})," The project aims to minimize the use of paid third-party tools. As an example, Sealed Secrets will be preferred over HashiCorp Vault for managing secrets in Kubernetes."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Deployment Environment:"})," The initial deployment will be within a single cloud region (either AWS or GCP) to manage complexity during the initial phase."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Compliance Requirements:"})," The system must adhere to GDPR regulations for handling personal data of EU users and comply with PCI-DSS standards for processing payment information."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"7. Assumptions & Dependencies"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Assumption 1:"})," The PayPal API will maintain a minimum availability of 99.95%."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Dependency 1:"})," A fully managed Kubernetes cluster (e.g., AWS EKS or Google GKE) will be provisioned and maintained by the cloud provider."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Dependency 2:"})," A properly configured and accessible Keycloak server will be available for identity and access management."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Document Version: 1.0"}),"\n",(0,i.jsx)(t.li,{children:"Date: 2025-06-19"}),"\n",(0,i.jsx)(t.li,{children:"Author: ArturChernets"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);