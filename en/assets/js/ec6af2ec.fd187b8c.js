"use strict";(self.webpackChunkbbs_docs=self.webpackChunkbbs_docs||[]).push([[9848],{6482:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Testing/Test_Strategy","title":"Testing Strategy","description":"This document defines the overall testing strategy for the Bus Ticket Booking Platform, covering unit, integration, E2E, and contract testing layers.","source":"@site/docs/08_Testing/01_Test_Strategy.md","sourceDirName":"08_Testing","slug":"/Testing/Test_Strategy","permalink":"/bbs-docs/en/docs/Testing/Test_Strategy","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"8. Testing","permalink":"/bbs-docs/en/docs/testing"},"next":{"title":"Testing Cases","permalink":"/bbs-docs/en/docs/Testing/Test_Cases"}}');var i=s(4848),r=s(8453);const l={},o="Testing Strategy",c={},d=[{value:"1. Goals",id:"1-goals",level:2},{value:"2. Testing Pyramid",id:"2-testing-pyramid",level:2},{value:"3. Test Types",id:"3-test-types",level:2},{value:"3.1 Unit Tests",id:"31-unit-tests",level:3},{value:"3.2 Integration Tests",id:"32-integration-tests",level:3},{value:"3.3 Contract Tests",id:"33-contract-tests",level:3},{value:"3.4 End-to-End Tests",id:"34-end-to-end-tests",level:3},{value:"4. Tooling",id:"4-tooling",level:2},{value:"5. Coverage",id:"5-coverage",level:2},{value:"6. Best Practices",id:"6-best-practices",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-strategy",children:"Testing Strategy"})}),"\n",(0,i.jsx)(n.p,{children:"This document defines the overall testing strategy for the Bus Ticket Booking Platform, covering unit, integration, E2E, and contract testing layers."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-goals",children:"1. Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure system correctness and reliability across services"}),"\n",(0,i.jsx)(n.li,{children:"Detect regressions quickly during development and CI"}),"\n",(0,i.jsx)(n.li,{children:"Validate external service integrations (e.g., payments, notifications)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-testing-pyramid",children:"2. Testing Pyramid"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"                [E2E Tests]       - Selenium + REST Assured\n              ----------------\n            [Integration Tests]  - TestContainers + MockServer\n          --------------------\n        [Unit Tests]             - JUnit + Mockito\n      ------------------------\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-test-types",children:"3. Test Types"}),"\n",(0,i.jsx)(n.h3,{id:"31-unit-tests",children:"3.1 Unit Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Framework"}),": JUnit 5 + Mockito"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scope"}),": Individual classes, no DB or network"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": Validate seat availability logic"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"32-integration-tests",children:"3.2 Integration Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Framework"}),": JUnit + SpringBootTest + TestContainers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scope"}),": Persistence (Postgres), messaging (Kafka), external APIs (Payment)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolation"}),": One container per service"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"33-contract-tests",children:"3.3 Contract Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tool"}),": Pact (consumer/provider)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case"}),": Validate API contracts between Booking & Payment service"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI/CD Step"}),": Provider verification before deployment"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"34-end-to-end-tests",children:"3.4 End-to-End Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tools"}),": REST Assured, Selenium (optional)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scope"}),": Full booking flow (search \u2192 book \u2192 pay \u2192 confirm)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-tooling",children:"4. Tooling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JUnit 5"}),": Primary test runner"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mockito"}),": Mocking dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TestContainers"}),": Real containers for DB, Kafka, Redis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pact"}),": API contract testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Allure Report"}),": Unified reporting"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-coverage",children:"5. Coverage"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target"}),": 85%+ statement coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blocked builds"})," if < 60%"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exclusions"}),": DTOs, Configs"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-best-practices",children:"6. Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write meaningful test names and descriptions"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@DisplayName"}),", ",(0,i.jsx)(n.code,{children:"@Nested"})," classes"]}),"\n",(0,i.jsx)(n.li,{children:"Keep unit tests fast (< 100ms)"}),"\n",(0,i.jsx)(n.li,{children:"Prefer constructor injection for better testability"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Document Version: 1.0"}),"\n",(0,i.jsx)(n.li,{children:"Date: 2025-06-23"}),"\n",(0,i.jsx)(n.li,{children:"Author: ArturChernets"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);