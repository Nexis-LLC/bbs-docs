"use strict";(self.webpackChunkbbs_docs=self.webpackChunkbbs_docs||[]).push([[3111],{6305:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"DevOps/CI_CD","title":"CI/CD Pipeline Design","description":"This document outlines the GitHub Actions and ArgoCD-based CI/CD pipeline for the Bus Ticket Booking System. The pipeline is designed to meet standards for reliability, security, and developer productivity.","source":"@site/docs/04_DevOps/01_CI_CD.md","sourceDirName":"04_DevOps","slug":"/DevOps/CI_CD","permalink":"/bbs-docs/en/docs/DevOps/CI_CD","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4. DevOps","permalink":"/bbs-docs/en/docs/devops"},"next":{"title":"Deployment Guide: Kubernetes, Helm & ArgoCD","permalink":"/bbs-docs/en/docs/DevOps/Deployment"}}');var r=i(4848),t=i(8453);const l={},c="CI/CD Pipeline Design",o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"CI (Continuous Integration)",id:"ci-continuous-integration",level:2},{value:"1. Linting &amp; Static Analysis",id:"1-linting--static-analysis",level:3},{value:"2. Unit &amp; Integration Testing",id:"2-unit--integration-testing",level:3},{value:"3. Dependency Scanning",id:"3-dependency-scanning",level:3},{value:"4. Build &amp; Containerization",id:"4-build--containerization",level:3},{value:"5. Artifact Publishing",id:"5-artifact-publishing",level:3},{value:"CD (Continuous Delivery) &amp; GitOps",id:"cd-continuous-delivery--gitops",level:2},{value:"1. Git Branching Strategy",id:"1-git-branching-strategy",level:3},{value:"2. Deployment Manifests &amp; Helm Charts",id:"2-deployment-manifests--helm-charts",level:3},{value:"3. ArgoCD Application Definitions",id:"3-argocd-application-definitions",level:3},{value:"4. Promotion &amp; Rollback Policies",id:"4-promotion--rollback-policies",level:3},{value:"Security &amp; Compliance",id:"security--compliance",level:2},{value:"Observability &amp; Notifications",id:"observability--notifications",level:2},{value:"Best Practices",id:"best-practices",level:2}];function a(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"cicd-pipeline-design",children:"CI/CD Pipeline Design"})}),"\n",(0,r.jsxs)(e.p,{children:["This document outlines the ",(0,r.jsx)(e.strong,{children:"GitHub Actions"})," and ",(0,r.jsx)(e.strong,{children:"ArgoCD"}),"-based CI/CD pipeline for the Bus Ticket Booking System. The pipeline is designed to meet standards for reliability, security, and developer productivity."]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"#ci-continuous-integration",children:"CI (Continuous Integration)"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Linting & Static Analysis"}),"\n",(0,r.jsx)(e.li,{children:"Unit & Integration Testing"}),"\n",(0,r.jsx)(e.li,{children:"Dependency Scanning"}),"\n",(0,r.jsx)(e.li,{children:"Build & Containerization"}),"\n",(0,r.jsx)(e.li,{children:"Artifact Publishing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"#cd-continuous-delivery--gitops",children:"CD (Continuous Delivery) & GitOps"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Git Branching Strategy"}),"\n",(0,r.jsx)(e.li,{children:"Deployment Manifests & Helm Charts"}),"\n",(0,r.jsx)(e.li,{children:"ArgoCD Application Definitions"}),"\n",(0,r.jsx)(e.li,{children:"Promotion & Rollback Policies"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"#security--compliance",children:"Security & Compliance"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"#observability--notifications",children:"Observability & Notifications"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"ci-continuous-integration",children:"CI (Continuous Integration)"}),"\n",(0,r.jsxs)(e.p,{children:["The GitHub Actions workflow (",(0,r.jsx)(e.code,{children:".github/workflows/ci.yml"}),") is triggered on every pull request and push to ",(0,r.jsx)(e.code,{children:"main"}),"."]}),"\n",(0,r.jsx)(e.h3,{id:"1-linting--static-analysis",children:"1. Linting & Static Analysis"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Spring Boot Projects"}),": Use ",(0,r.jsx)(e.a,{href:"https://checkstyle.org/",children:"Checkstyle"})," and ",(0,r.jsx)(e.a,{href:"https://spotbugs.github.io/",children:"SpotBugs"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Workflow Step"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"- name: Check code style\n  uses: actions/setup-java@v3\n  with:\n    distribution: 'temurin'\n    java-version: '21'\n- run: mvn verify -Pcheckstyle,spotbugs\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"2-unit--integration-testing",children:"2. Unit & Integration Testing"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Unit Tests"}),": JUnit 5 + Mockito."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Integration Tests"}),": Testcontainers for PostgreSQL, Redis, Kafka."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Coverage Gate"}),": Minimum 80% line coverage enforced."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Workflow Step"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"- name: Run tests\n  run: mvn test\n- name: Enforce coverage\n  run: mvn jacoco:check\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"3-dependency-scanning",children:"3. Dependency Scanning"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Dependabot"}),": Automated pull requests for dependency upgrades."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"OSS Security"}),": Use ",(0,r.jsxs)(e.a,{href:"https://github.com/reviewdog/reviewdog",children:["GitHub\u2019s ",(0,r.jsx)(e.code,{children:"reviewdog"})]})," integration with ",(0,r.jsx)(e.a,{href:"https://snyk.io/docs/using-snyk/cli",children:"Snyk CLI"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Workflow Step"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"- name: Run Snyk scan\n  uses: snyk/actions/java@master\n  with:\n    args: test --severity-threshold=high\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"4-build--containerization",children:"4. Build & Containerization"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Build Artifacts"}),": ",(0,r.jsx)(e.code,{children:"mvn package"})," produces JARs."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Container Image"}),": Build with ",(0,r.jsx)(e.a,{href:"https://docs.docker.com/engine/reference/commandline/buildx/",children:"Docker Buildx"})," for multi-arch support."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Tagged Images"}),": ",(0,r.jsx)(e.code,{children:"${{ github.sha }}"})," for PRs; semantic version tags for ",(0,r.jsx)(e.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Workflow Step"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"- name: Build and push Docker image\n  uses: docker/build-push-action@v3\n  with:\n    context: .\n    push: true\n    tags: |\n      ghcr.io/${{ github.repository }}:${{ github.sha }}\n      ghcr.io/${{ github.repository }}:latest\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"5-artifact-publishing",children:"5. Artifact Publishing"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Container Registry"}),": GitHub Container Registry (GHCR)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Immutable Artifacts"}),": Images are immutable; ",(0,r.jsx)(e.code,{children:"latest"})," tag points to newest stable."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"cd-continuous-delivery--gitops",children:"CD (Continuous Delivery) & GitOps"}),"\n",(0,r.jsxs)(e.p,{children:["We use ",(0,r.jsx)(e.strong,{children:"ArgoCD"})," for declarative deployments. All Kubernetes manifests and Helm charts live in the ",(0,r.jsx)(e.code,{children:"infrastructure/"})," directory and are driven by Git."]}),"\n",(0,r.jsx)(e.h3,{id:"1-git-branching-strategy",children:"1. Git Branching Strategy"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.code,{children:"main"})}),": Production-ready manifests."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.code,{children:"develop"})}),": Staging environment."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Feature branches"}),": PR \u2192 CI \u2192 merge to ",(0,r.jsx)(e.code,{children:"develop"})," \u2192 ArgoCD sync to staging."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"2-deployment-manifests--helm-charts",children:"2. Deployment Manifests & Helm Charts"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Helm Charts"}),": One chart per microservice with values files for each environment."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Parameterization"}),": ",(0,r.jsx)(e.code,{children:"image.tag"}),", ",(0,r.jsx)(e.code,{children:"replicaCount"}),", ",(0,r.jsx)(e.code,{children:"resources.requests/limits"}),"."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"3-argocd-application-definitions",children:"3. ArgoCD Application Definitions"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"App-of-Apps"})," pattern**: Root ",(0,r.jsx)(e.code,{children:"argocd-root-app.yaml"})," references child apps for each service."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sync Policy"}),": Automated sync with self-heal; manual overrides for production."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"4-promotion--rollback-policies",children:"4. Promotion & Rollback Policies"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Staged Rollout"}),": Canary deployments via ArgoCD Rollout plugin (Blue/Green or Canary)."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Automated Rollback"}),": If health checks or SLO metrics breach thresholds, auto-rollback to previous healthy revision."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"security--compliance",children:"Security & Compliance"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Secrets Management"}),": SOPS-encrypted YAML stored in Git; decrypted by ArgoCD Sealed Secrets controller."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Least Privilege"}),": Service accounts with minimal RBAC for CI runner and ArgoCD."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Signing"}),": Image signing with Cosign to enforce supply chain security."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"observability--notifications",children:"Observability & Notifications"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Build Status"}),": GitHub Checks API for pass/fail."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Slack/Teams Alerts"}),": CI failures notify ",(0,r.jsx)(e.code,{children:"#ci-cd"})," channel via ",(0,r.jsx)(e.a,{href:"https://github.com/rtCamp/action-slack",children:"actions-slack"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ArgoCD Health"}),": ArgoCD sends alerts on sync failures via Webhook to PagerDuty."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Idempotent Workflows"}),": Retries safe; pipeline steps idempotent."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Speed & Feedback"}),": PR checks complete within 5 minutes."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Traceability"}),": Every deployment tied to a Git commit, PR, and Jira ticket via commit message."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Scalability"}),": Self-hosted runners scale on-demand using Kubernetes."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Documentation"}),": All workflows documented in ",(0,r.jsx)(e.code,{children:"CI_CD.md"}),", inline YAML comments, and repo README."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Document Version: 1.0"}),"\n",(0,r.jsx)(e.li,{children:"Date: 2025-06-21"}),"\n",(0,r.jsx)(e.li,{children:"Author: ArturChernets"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function l(n){const e=s.useContext(t);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);